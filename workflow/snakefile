import os,sys
sys.path.append(os.path.abspath('.'))
import sample
SAMPLES =sample.get_SAMPLES()
#SAMPLES = ["RV417026_S15_L001", "RV417027_S18_L001", "RV417028_S20_L001","RV417029_S19_L001"]

rule all:
    input:  
        expand("pipeline1_ref_result/{sample}_consensus.fa",sample=SAMPLES),
        directory(expand('pipeline1_ref_fastqc_report/before/{sample}',sample=SAMPLES)), 
        directory(expand('pipeline1_ref_fastqc_report/after/{sample}',sample=SAMPLES)) 



rule qc_before:
    input:
        "original_fastq/FastqExamples/{sample}_R1_001.fastq",
        "original_fastq/FastqExamples/{sample}_R2_001.fastq",
    output:
        directory('pipeline1_ref_fastqc_report/before/{sample}')    
    conda:
        "envs/mapping.yaml"
    shell:
        "mkdir -p {output} && fastqc -o {output} -t 16 {input[0]} {input[1]}"  

rule fastp:
    input:
        "original_fastq/FastqExamples/{sample}_R1_001.fastq",
        "original_fastq/FastqExamples/{sample}_R2_001.fastq",
    output:
        "pipeline1_ref_filtered_result/{sample}_R1_001.cleaned.fastq",
        "pipeline1_ref_filtered_result/{sample}_R2_001.cleaned.fastq"
    conda:
        "envs/mapping.yaml"
    shell:
        "fastp -i {input[0]} -o {output[0]} -I {input[1]} -O {output[1]} -q 20 -c -y -l 50 -g -p -f 10 -n 5 --adapter_sequence GCGAATTTCGACGATCGTTGCATTAACTCGCGAA --adapter_sequence_r2 AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"


rule qc_after:
    input:
        "pipeline1_ref_filtered_result/{sample}_R1_001.cleaned.fastq",
        "pipeline1_ref_filtered_result/{sample}_R2_001.cleaned.fastq",
    output:
         directory('pipeline1_ref_fastqc_report/after/{sample}')   
    conda:
        "envs/mapping.yaml"
    shell:
        "mkdir -p {output} && fastqc -o {output} -t 16 {input[0]} {input[1]}"  


rule bwa_mem:
    input:
        "pipeline1_ref_filtered_result/{sample}_R1_001.cleaned.fastq",
        "pipeline1_ref_filtered_result/{sample}_R2_001.cleaned.fastq",
    output:
        "pipeline1_ref_mapped/{sample}.bam"
    conda:
        "envs/mapping.yaml"
    shell:
        "bwa mem -p midresult/ref {input[0]} {input[1]} -o {output[0]}"

rule sam_view:
    input:
        "pipeline1_ref_mapped/{sample}.bam"
    output:
        "pipeline1_ref_mapped/{sample}_1.bam"
    conda:
        "envs/mapping.yaml"
    shell:
        "samtools view -b {input} -o {output}"
    
rule sam_sort:
    input:
        "pipeline1_ref_mapped/{sample}_1.bam"
    output:
        "pipeline1_ref_sorted/{sample}.bam"
    conda:
        "envs/mapping.yaml"
    shell:
        "samtools sort {input} -o {output}"

rule remove_duplicates:
    input:
        "pipeline1_ref_sorted/{sample}.bam"
    output:
        "pipeline1_ref_sorted/{sample}.markdup.bam",
        "pipeline1_ref_sorted/{sample}.markdup_metrics.txt"
    conda:
        "envs/mapping.yaml"
    shell:
        "picard MarkDuplicates -I {input} -O {output[0]} -M {output[1]}"            

rule sam_index:
    input:
        "pipeline1_ref_sorted/{sample}.markdup.bam",
    output:
        "pipeline1_ref_sorted/{sample}.bam.bai"
    conda:
        "envs/mapping.yaml"
    shell:
        "samtools sort {input} -o {output}"

rule mpileup:
    input:
        "pipeline1_ref_sorted/{sample}.markdup.bam",
        "workflow/ref.fasta",
    output:
        "pipeline1_ref_sorted/{sample}.bcf",
    conda: 
        "envs/mapping.yaml"
    shell:
        "bcftools mpileup -Ob -o {output} -f {input[1]} {input[0]}"


rule call_variant:
    input:
        "pipeline1_ref_sorted/{sample}.bcf",
    output:
        "pipeline1_ref_result/{sample}.vcf",
    conda:
        "envs/mapping.yaml"
    shell:
        "bcftools call -m -v -Ov -o {output} {input}" 

rule filter_vcf:
    input:
        "pipeline1_ref_result/{sample}.vcf",
    output:
        "pipeline1_ref_result/{sample}_final.vcf",
    conda:
        "envs/mapping.yaml"
    shell:
        "vcfutils.pl varFilter {input} > {output}"

rule vcf_bgzip:
    input:
        "pipeline1_ref_result/{sample}_final.vcf",
    output:
        "pipeline1_ref_result/{sample}_final.vcf.gz",
    conda:
        "envs/mapping.yaml"
    shell:
        "bcftools view {input} -Oz -o {output}"      

rule consensus:
    input:
        "pipeline1_ref_result/{sample}_final.vcf.gz",
        "workflow/ref.fasta",
    output:
        "pipeline1_ref_result/{sample}_final.vcf.gz.tbi",
        "pipeline1_ref_result/{sample}_consensus.fa",
    conda:
        "envs/mapping.yaml"
    shell:
        "bcftools index -t -o {output[0]} {input[0]}; bcftools consensus -f {input[1]} {input[0]} > {output[1]}"
 
